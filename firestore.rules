rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is participant in conversation
    function isParticipant(conversationId) {
      return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles (for search, display names, etc.)
      allow read: if isAuthenticated();

      // Users can only write their own profile
      // Fields: displayName, email, profileImageURL, status, lastSeen, lastHeartbeat, fcmToken
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Can read if user is a participant
      allow read: if isAuthenticated() && isParticipant(conversationId);
      
      // Can create if user is in participants list
      allow create: if isAuthenticated() && 
                      request.auth.uid in request.resource.data.participants;
      
      // Can update if user is a participant (for last message, etc.)
      allow update: if isAuthenticated() && isParticipant(conversationId);
      
      // Can delete if user is a participant
      allow delete: if isAuthenticated() && isParticipant(conversationId);
      
      // Messages subcollection
      match /messages/{messageId} {
        // Can read messages if user is conversation participant
        allow read: if isAuthenticated() && isParticipant(conversationId);
        
        // Can create message if user is participant and is the sender
        allow create: if isAuthenticated() && 
                        isParticipant(conversationId) &&
                        request.auth.uid == request.resource.data.senderID;
        
        // Can update message (for read receipts, status)
        allow update: if isAuthenticated() && isParticipant(conversationId);
        
        // Can delete own messages
        allow delete: if isAuthenticated() && 
                        isParticipant(conversationId) &&
                        request.auth.uid == resource.data.senderID;
      }
      
      // Presence subcollection (for typing indicators)
      match /presence/{userId} {
        // Can read if user is conversation participant
        allow read: if isAuthenticated() && isParticipant(conversationId);
        
        // Can write own presence only
        allow write: if isAuthenticated() && 
                       request.auth.uid == userId && 
                       isParticipant(conversationId);
      }
    }
    
    // AI Cache collection (for future AI features)
    match /aiCache/{cacheId} {
      // Anyone authenticated can read cache
      allow read: if isAuthenticated();
      
      // Only server (Cloud Functions) can write cache
      // Client writes will be denied
      allow write: if false;
    }
    
    // Rate Limits collection (for future AI features)
    match /rateLimits/{userId} {
      // Users can read their own rate limits
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only server can write rate limits
      allow write: if false;
    }
  }
}

